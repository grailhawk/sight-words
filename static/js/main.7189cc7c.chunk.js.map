{"version":3,"sources":["view.js","main.js","reportWebVitals.js","index.js"],"names":["View","prop","prog","current","total","word","status","next","prev","hits","hit","misses","miss","reset","showTimer","changeMode","time","handlers","useSwipeable","onSwipedDown","_","onSwipedUp","onSwipedLeft","onSwipedRight","preventDefaultTouchmoveEvent","Segment","inverted","Progress","percent","modeText","className","onClick","onContextMenu","e","preventDefault","Button","fluid","stopPropagation","TIMED_MODE","NORMAL_MODE","words","sightwords","w","ret","length","i","Math","floor","random","push","splice","setup","index","nIndex","Main","useState","setHits","setMisses","setIndex","mode","setMode","setStatus","update","id","setInterval","timer","console","log","nt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7189cc7c.chunk.js","sourcesContent":["import React from 'react'\nimport { useSwipeable } from 'react-swipeable'\nimport { Button, Progress, Segment } from 'semantic-ui-react'\nimport './styles.css';\n\nfunction View(prop) {\n  const {\n    current,   // index of the word being displayed\n    total,     // total number of words known\n    word,      // the current sight word being shown\n    status,    // score|miss|next|prev basicly the last action taken\n    next,      // func used to show the next word\n    prev,      // func used to show the previous word\n    hits,      // number of words the player/student has gotten right\n    hit,       // func used to indicate that the player/student has gotten a word correctly\n    misses,    // number of words the player/student has gotten wrong\n    miss,      // func used to indicate that the player/student has gotten a word wrong\n    reset,     // fucn used to reset the Hits, Misses, and to go back to the first word.\n    showTimer, // show the timer\n    changeMode,// Used to change the game mode form timed to normal\n    time       // if game mode === timed then this is the time left before the end of the round\n  } = prop\n\n  // Build the swipeable handlers\n  const handlers = useSwipeable({\n    onSwipedDown: _ => miss(),\n    onSwipedUp: _ => hit(),\n    onSwipedLeft: _ => next(),\n    onSwipedRight: _ => prev(),\n    preventDefaultTouchmoveEvent: true\n  })\n\n  let prog\n  if (showTimer) {\n    prog = <Segment inverted>\n      <Progress percent={time} inverted/>\n    </Segment>\n  }\n\n  let modeText = 'Start'\n  if (showTimer) {\n    modeText = 'End'\n  }\n  // Build t he view\n  const view = <div\n    { ...handlers }\n    className=\"app-header\"\n    onClick={next}\n    onContextMenu={ e => {\n      e.preventDefault()\n      prev()\n    }}>\n    <p>\n      {word}\n    </p>\n    <div className='app-report'>\n      <div className='app-report-left'>\n        {hits}\n      </div>\n      <div className='app-report-center'>\n        {current}/{total}\n      </div>\n      <div className='app-report-right'>\n        {misses}\n      </div>\n    </div>\n    <div>\n      {status}\n    </div>\n    <div className='bottom'>\n        <div>\n          <div className='app-buttons'>\n            <Button\n              fluid\n              onClick={e => {\n                e.preventDefault()\n                e.stopPropagation()\n                changeMode()\n              }}>\n              {modeText}\n            </Button>\n          </div>\n          <div className='on-right'>\n            <div className='app-buttons'>\n              <Button\n                fluid\n                onClick={e => {\n                  e.preventDefault()\n                  e.stopPropagation()\n                  reset()\n                }}>\n                  Reset\n              </Button>\n            </div>\n          </div>\n        </div>\n        <div className='progress-div'>\n          {prog}\n        </div>\n    </div>\n  </div>\n\n  // render the view\n  return view\n}\n\nexport default View;\n","// Deploy on gitpage info here\n// https://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f\nimport React, {useState, useEffect, useRef } from 'react'\nimport View from './view'\nimport sightwords from './words'\n\nconst TIMED_MODE = 'rapid_fire'\nconst NORMAL_MODE = 'normal_mode'\n// the time in seconds used by the rapid fire mode\nconst TIME = 20\nlet time = 0\n// the list of words to test the student on\nconst words = setup(sightwords)\n\n/**\n * used to randomize the list of sight words to prevent the studdent from expecting a given order\n * @param {array} sightwords - list of sight words to test the student with\n */\nfunction setup (sightwords) {\n  const w = [...sightwords] // copy the sightwords array so we can distory it as we go\n  const ret = [] // the new randomized array\n\n  // Build the new array\n  while (w.length > 0) {\n    // randomly select a word from the old array\n    let i = Math.floor(Math.random() * w.length)\n    // put the word in the new array\n    ret.push(w[i])\n    // remove the word form the old array\n    w.splice(i, 1)\n  }\n\n  // return the new randomize array\n  return ret\n}\n\n/**\n * get the index for the next display word \n * @param {number} index - the index of the currently displayed word\n */\nfunction next (index) {\n  let nIndex = index + 1\n  // if we are going over the out of bounds of the array go back to 0\n  if (nIndex >= words.length) {\n    nIndex = 0\n  }\n  return nIndex\n}\n\n/**\n * get the index of the previously displayed word\n * @param {number} index - the index of the currently displayed word\n */\nfunction prev (index) {\n  let nIndex = index - 1\n  if (nIndex <= 0) {\n    nIndex = words.length -1\n  }\n  return nIndex\n}\n\nfunction timer (update) {\n  const id = setInterval(_ => {\n    update()\n  }, 1000)\n  return _ => clearInterval(id)\n}\n\n/**\n * run the application\n */\nfunction Main() {\n  const [hits, setHits] = useState(0)\n  const [misses, setMisses] = useState(0)\n  const [index, setIndex] = useState(0)\n  const [mode, setMode] = useState(NORMAL_MODE)\n  const [status, setStatus] = useState('')\n  const word = words[index]\n  return <View\n    current={index + 1}\n    total={words.length}\n    word={word}\n    status={status}\n    hits={hits}\n    misses={misses}\n    showTimer={mode === TIMED_MODE}\n    time={time/TIME * 100}\n    changeMode={_ => {\n      let end\n      if (mode === NORMAL_MODE) {\n        setMode(TIMED_MODE)\n        timer(_ => {\n          console.log('here')\n          let nt = time + 1\n          if (nt > TIME) {\n            time = 0\n            setMisses(misses + 1)\n            setIndex(next(index))\n          } else {\n            time = nt\n            setStatus(nt)\n          }\n        })\n      } else {\n        setMode(NORMAL_MODE)\n        if (end != null){\n          end()\n        }\n      }\n    }}\n    next={_ => {\n      setIndex(next(index))\n      setStatus('Next')\n    }}\n    prev={_ => {\n      setIndex(prev(index))\n      setStatus(\"Prev\")\n    }}\n    hit={ _ => {\n      setHits(hits + 1)\n      setIndex(next(index))\n      setStatus('Score')\n    }}\n    miss={ _ => {\n      setMisses(misses + 1)\n      setIndex(next(index))\n      setStatus('Miss')\n    }}\n    reset={ _ => {\n      setHits(0)\n      setMisses(0)\n      setIndex(0)\n    }} />\n}\n\nexport default Main;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './main';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}