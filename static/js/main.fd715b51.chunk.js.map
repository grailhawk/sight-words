{"version":3,"sources":["view.js","main.js","reportWebVitals.js","index.js"],"names":["View","prop","current","total","word","status","next","prev","hits","hit","misses","miss","showTimer","reset","handlers","changeMode","time","useSwipeable","onSwipedDown","_","onSwipedUp","onSwipedLeft","onSwipedRight","preventDefaultTouchmoveEvent","Segment","Progress","className","onClick","onContextMenu","e","preventDefault","TIMED_MODE","NORMAL_MODE","words","sightwords","w","ret","length","i","Math","floor","random","push","splice","setup","index","nIndex","Main","useState","setHits","setMiss","setIndex","mode","setMode","setStatus","rapid","action","stop","update","id","setInterval","clearInterval","timer","console","log","nt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd715b51.chunk.js","sourcesContent":["import React from 'react'\nimport { useSwipeable } from 'react-swipeable'\nimport { Button, Progress, Segment } from 'semantic-ui-react'\nimport './styles.css';\n\nfunction View(prop) {\n  const {\n    current,   // index of the word being displayed\n    total,     // total number of words known\n    word,      // the current sight word being shown\n    status,    // score|miss|next|prev basicly the last action taken\n    next,      // func used to show the next word\n    prev,      // func used to show the previous word\n    hits,      // number of words the player/student has gotten right\n    hit,       // func used to indicate that the player/student has gotten a word correctly\n    misses,    // number of words the player/student has gotten wrong\n    miss,      // func used to indicate that the player/student has gotten a word wrong\n    reset,     // func used to reset the Hits, Misses, and to go back to the first word.\n    showTimer, // show the timer\n    changeMode,// Used to change the game mode form timed to normal\n    time       // if game mode === timed then this is the time left before the end of the round\n  } = prop\n\n  // Build the swipeable handlers\n  const handlers = useSwipeable({\n    onSwipedDown: _ => miss(),\n    onSwipedUp: _ => hit(),\n    onSwipedLeft: _ => next(),\n    onSwipedRight: _ => prev(),\n    preventDefaultTouchmoveEvent: true\n  })\n\n  let prog\n  if (showTimer) {\n    prog = <Segment inverted>\n      <Progress percent={time} inverted/>\n    </Segment>\n  }\n\n  let modeText = 'Start'\n  if (showTimer) {\n    modeText = 'End'\n  }\n  // Build t he view\n  const view = <div\n    { ...handlers }\n    className=\"app-header\"\n    onClick={next}\n    onContextMenu={ e => {\n      e.preventDefault()\n      prev()\n    }}>\n    <p>\n      {word}\n    </p>\n    <div className='app-report'>\n      <div className='app-report-left'>\n        {hits}\n      </div>\n      <div className='app-report-center'>\n        {current}/{total}\n      </div>\n      <div className='app-report-right'>\n        {misses}\n      </div>\n    </div>\n    <div>\n      {status}\n    </div>\n    {/* <div className='bottom'>\n        <div>\n          <div className='app-buttons'>\n            <Button\n              fluid\n              onClick={e => {\n                e.preventDefault()\n                e.stopPropagation()\n                changeMode()\n              }}>\n              {modeText}\n            </Button>\n          </div>\n          <div className='on-right'>\n            <div className='app-buttons'>\n              <Button\n                fluid\n                onClick={e => {\n                  e.preventDefault()\n                  e.stopPropagation()\n                  reset()\n                }}>\n                  Reset\n              </Button>\n            </div>\n          </div>\n        </div>\n        <div className='progress-div'>\n          {prog}\n        </div>\n    </div> */}\n  </div>\n\n  // render the view\n  return view\n}\n\nexport default View;\n","// Deploy on gitpage info here\n// https://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f\nimport React, { useState } from 'react'\nimport View from './view'\nimport sightwords from './words'\n\nconst TIMED_MODE = 'rapid_fire'\nconst NORMAL_MODE = 'normal_mode'\n// the time in seconds used by the rapid fire mode\nconst TIME = 10\nlet time = 0\n// the list of words to test the student on\nconst words = setup(sightwords)\n\n/**\n * used to randomize the list of sight words to prevent the studdent from expecting a given order\n * @param {array} sightwords - list of sight words to test the student with\n */\nfunction setup (sightwords) {\n  const w = [...sightwords] // copy the sightwords array so we can distory it as we go\n  const ret = [] // the new randomized array\n\n  // Build the new array\n  while (w.length > 0) {\n    // randomly select a word from the old array\n    let i = Math.floor(Math.random() * w.length)\n    // put the word in the new array\n    ret.push(w[i])\n    // remove the word form the old array\n    w.splice(i, 1)\n  }\n\n  // return the new randomize array\n  return ret\n}\n\n/**\n * get the index for the next display word \n * @param {number} index - the index of the currently displayed word\n */\nfunction next (index) {\n  let nIndex = index + 1\n  // if we are going over the out of bounds of the array go back to 0\n  if (nIndex >= words.length) {\n    nIndex = 0\n  }\n  return nIndex\n}\n\n/**\n * get the index of the previously displayed word\n * @param {number} index - the index of the currently displayed word\n */\nfunction prev (index) {\n  let nIndex = index - 1\n  if (nIndex <= 0) {\n    nIndex = words.length -1\n  }\n  return nIndex\n}\n\n/**\n * run the application\n */\nfunction Main() {\n  const [hits, setHits] = useState(0)\n  const [miss, setMiss] = useState(0)\n  const [index, setIndex] = useState(0)\n  const [mode, setMode] = useState(NORMAL_MODE)\n  const [status, setStatus] = useState('')\n  const word = words[index]\n\n\n  function rapid (action) {\n    // used to stop the rapid fire mode\n    let stop = null\n\n    /**\n     * used to abstract setInterval functionality\n     * @param {func} update - interval callback\n     */\n    function timer (update) {\n      const id = setInterval(_ => {\n        update()\n      }, 1000)\n      return _ => clearInterval(id)\n    }\n\n    if (action === 'reset') {\n      rapid('stop')\n      rapid('start')\n    }\n  \n    if (action === 'stop') {\n      if (stop != null) {\n        stop()\n        stop = null\n        time = 0\n        setStatus('')\n      }\n    }\n\n    if (action == null || action === '' || action === 'start') {\n      stop = timer(_ => {\n        console.log('here')\n        let nt = time + 1\n        if (nt > TIME) {\n          time = 0\n          setMiss(miss + 1)\n          setIndex(next(index))\n        } else {\n          time = nt\n          setStatus(nt)\n        }\n      })  \n    }\n  }\n\n\n  return <View\n    current={index + 1}\n    total={words.length}\n    word={word}\n    status={status}\n    hits={hits}\n    misses={miss}\n    showTimer={mode === TIMED_MODE}\n    time={time/TIME * 100}\n    changeMode={_ => {\n      if (mode === NORMAL_MODE) {\n        setMode(TIMED_MODE)\n        rapid('start')\n      } else {\n        setMode(NORMAL_MODE)\n        rapid('stop')\n      }\n    }}\n    next={_ => {\n      setIndex(next(index))\n      setStatus('Next')\n    }}\n    prev={_ => {\n      setIndex(prev(index))\n      setStatus(\"Prev\")\n    }}\n    hit={ _ => {\n      if (mode === TIMED_MODE) {\n        rapid('reset')\n      }\n      setHits(hits + 1)\n      setIndex(next(index))\n      setStatus('Score')\n    }}\n    miss={ _ => {\n      if (mode === TIMED_MODE) {\n        rapid('reset')\n      }\n      setMiss(miss + 1)\n      setIndex(next(index))\n      setStatus('Miss')\n    }}\n    reset={ _ => {\n      setHits(0)\n      setMiss(0)\n      setIndex(0)\n    }} />\n}\n\nexport default Main;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './main';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}