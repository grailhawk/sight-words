{"version":3,"sources":["view.js","main.js","reportWebVitals.js","index.js"],"names":["View","prop","prog","current","total","word","status","next","prev","hits","hit","misses","miss","reset","showTimer","changeMode","time","handlers","useSwipeable","onSwipedDown","_","onSwipedUp","onSwipedLeft","onSwipedRight","preventDefaultTouchmoveEvent","Segment","inverted","Progress","percent","modeText","className","onClick","onContextMenu","e","preventDefault","Button","fluid","stopPropagation","TIMED_MODE","NORMAL_MODE","words","sightwords","w","ret","length","i","Math","floor","random","push","splice","setup","stopRapidFire","index","nIndex","Main","useState","setHits","setMiss","setIndex","mode","setMode","setStatus","update","id","setInterval","clearInterval","timer","console","log","nt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OA0GeA,MArGf,SAAcC,GAAO,IA2BfC,EAzBFC,EAcEF,EAdFE,QACAC,EAaEH,EAbFG,MACAC,EAYEJ,EAZFI,KACAC,EAWEL,EAXFK,OACAC,EAUEN,EAVFM,KACAC,EASEP,EATFO,KACAC,EAQER,EARFQ,KACAC,EAOET,EAPFS,IACAC,EAMEV,EANFU,OACAC,EAKEX,EALFW,KACAC,EAIEZ,EAJFY,MACAC,EAGEb,EAHFa,UACAC,EAEEd,EAFFc,WACAC,EACEf,EADFe,KAIIC,EAAWC,uBAAa,CAC5BC,aAAc,SAAAC,GAAC,OAAIR,KACnBS,WAAY,SAAAD,GAAC,OAAIV,KACjBY,aAAc,SAAAF,GAAC,OAAIb,KACnBgB,cAAe,SAAAH,GAAC,OAAIZ,KACpBgB,8BAA8B,IAI5BV,IACFZ,EAAO,cAACuB,EAAA,EAAD,CAASC,UAAQ,EAAjB,SACL,cAACC,EAAA,EAAD,CAAUC,QAASZ,EAAMU,UAAQ,OAIrC,IAAIG,EAAW,QAgEf,OA/DIf,IACFe,EAAW,OAGA,gDACNZ,GADM,IAEXa,UAAU,aACVC,QAASxB,EACTyB,cAAgB,SAAAC,GACdA,EAAEC,iBACF1B,KANS,UAQX,4BACGH,IAEH,sBAAKyB,UAAU,aAAf,UACE,qBAAKA,UAAU,kBAAf,SACGrB,IAEH,sBAAKqB,UAAU,oBAAf,UACG3B,EADH,IACaC,KAEb,qBAAK0B,UAAU,mBAAf,SACGnB,OAGL,8BACGL,IAEH,sBAAKwB,UAAU,SAAf,UACI,gCACE,qBAAKA,UAAU,cAAf,SACE,cAACK,EAAA,EAAD,CACEC,OAAK,EACLL,QAAS,SAAAE,GACPA,EAAEC,iBACFD,EAAEI,kBACFtB,KALJ,SAOGc,MAGL,qBAAKC,UAAU,WAAf,SACE,qBAAKA,UAAU,cAAf,SACE,cAACK,EAAA,EAAD,CACEC,OAAK,EACLL,QAAS,SAAAE,GACPA,EAAEC,iBACFD,EAAEI,kBACFxB,KALJ,0BAYN,qBAAKiB,UAAU,eAAf,SACG5B,Y,QC3FLoC,EAAa,aACbC,EAAc,cAGhBvB,EAAO,EAELwB,EASN,SAAgBC,GACd,IAAMC,EAAC,YAAOD,GACRE,EAAM,GAGZ,KAAOD,EAAEE,OAAS,GAAG,CAEnB,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,SAAWN,EAAEE,QAErCD,EAAIM,KAAKP,EAAEG,IAEXH,EAAEQ,OAAOL,EAAG,GAId,OAAOF,EAxBKQ,CAAMV,GAGhBW,EAAgB,KA4BpB,SAAS7C,EAAM8C,GACb,IAAIC,EAASD,EAAQ,EAKrB,OAHIC,GAAUd,EAAMI,SAClBU,EAAS,GAEJA,EA0FMC,MAjEf,WAAiB,IAAD,EACUC,mBAAS,GADnB,mBACP/C,EADO,KACDgD,EADC,OAEUD,mBAAS,GAFnB,mBAEP5C,EAFO,KAED8C,EAFC,OAGYF,mBAAS,GAHrB,mBAGPH,EAHO,KAGAM,EAHA,OAIUH,mBAASjB,GAJnB,mBAIPqB,EAJO,KAIDC,EAJC,OAKcL,mBAAS,IALvB,mBAKPlD,EALO,KAKCwD,EALD,KAMRzD,EAAOmC,EAAMa,GACnB,OAAO,cAAC,EAAD,CACLlD,QAASkD,EAAQ,EACjBjD,MAAOoC,EAAMI,OACbvC,KAAMA,EACNC,OAAQA,EACRG,KAAMA,EACNE,OAAQC,EACRE,UAAW8C,IAAStB,EACpBtB,KAAMA,EAhFG,GAgFS,IAClBD,WAAY,SAAAK,GAENwC,IAASrB,GACXsB,EAAQvB,GACRc,EA9BR,SAAgBW,GACd,IAAMC,EAAKC,aAAY,SAAA7C,GACrB2C,MACC,KACH,OAAO,SAAA3C,GAAC,OAAI8C,cAAcF,IA0BJG,EAAM,SAAA/C,GACpBgD,QAAQC,IAAI,QACZ,IAAIC,EAAKtD,EAAO,EACZsD,EAxFD,IAyFDtD,EAAO,EACP0C,EAAQ9C,EAAO,GACf+C,EAASpD,EAAK8C,MAEdrC,EAAOsD,EACPR,EAAUQ,SAIdT,EAAQtB,GACRa,IACAA,EAAgB,KAChBpC,EAAO,EACP8C,EAAU,MAGdvD,KAAM,SAAAa,GACJuC,EAASpD,EAAK8C,IACdS,EAAU,SAEZtD,KAAM,SAAAY,GACJuC,EA/DN,SAAeN,GACb,IAAIC,EAASD,EAAQ,EAIrB,OAHIC,GAAU,IACZA,EAASd,EAAMI,OAAQ,GAElBU,EA0DM9C,CAAK6C,IACdS,EAAU,SAEZpD,IAAM,SAAAU,GACJqC,EAAQhD,EAAO,GACfkD,EAASpD,EAAK8C,IACdS,EAAU,UAEZlD,KAAO,SAAAQ,GACLsC,EAAQ9C,EAAO,GACf+C,EAASpD,EAAK8C,IACdS,EAAU,SAEZjD,MAAQ,SAAAO,GACNqC,EAAQ,GACRC,EAAQ,GACRC,EAAS,OC3HAY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b752c68c.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useSwipeable } from 'react-swipeable'\r\nimport { Button, Progress, Segment } from 'semantic-ui-react'\r\nimport './styles.css';\r\n\r\nfunction View(prop) {\r\n  const {\r\n    current,   // index of the word being displayed\r\n    total,     // total number of words known\r\n    word,      // the current sight word being shown\r\n    status,    // score|miss|next|prev basicly the last action taken\r\n    next,      // func used to show the next word\r\n    prev,      // func used to show the previous word\r\n    hits,      // number of words the player/student has gotten right\r\n    hit,       // func used to indicate that the player/student has gotten a word correctly\r\n    misses,    // number of words the player/student has gotten wrong\r\n    miss,      // func used to indicate that the player/student has gotten a word wrong\r\n    reset,     // fucn used to reset the Hits, Misses, and to go back to the first word.\r\n    showTimer, // show the timer\r\n    changeMode,// Used to change the game mode form timed to normal\r\n    time       // if game mode === timed then this is the time left before the end of the round\r\n  } = prop\r\n\r\n  // Build the swipeable handlers\r\n  const handlers = useSwipeable({\r\n    onSwipedDown: _ => miss(),\r\n    onSwipedUp: _ => hit(),\r\n    onSwipedLeft: _ => next(),\r\n    onSwipedRight: _ => prev(),\r\n    preventDefaultTouchmoveEvent: true\r\n  })\r\n\r\n  let prog\r\n  if (showTimer) {\r\n    prog = <Segment inverted>\r\n      <Progress percent={time} inverted/>\r\n    </Segment>\r\n  }\r\n\r\n  let modeText = 'Start'\r\n  if (showTimer) {\r\n    modeText = 'End'\r\n  }\r\n  // Build t he view\r\n  const view = <div\r\n    { ...handlers }\r\n    className=\"app-header\"\r\n    onClick={next}\r\n    onContextMenu={ e => {\r\n      e.preventDefault()\r\n      prev()\r\n    }}>\r\n    <p>\r\n      {word}\r\n    </p>\r\n    <div className='app-report'>\r\n      <div className='app-report-left'>\r\n        {hits}\r\n      </div>\r\n      <div className='app-report-center'>\r\n        {current}/{total}\r\n      </div>\r\n      <div className='app-report-right'>\r\n        {misses}\r\n      </div>\r\n    </div>\r\n    <div>\r\n      {status}\r\n    </div>\r\n    <div className='bottom'>\r\n        <div>\r\n          <div className='app-buttons'>\r\n            <Button\r\n              fluid\r\n              onClick={e => {\r\n                e.preventDefault()\r\n                e.stopPropagation()\r\n                changeMode()\r\n              }}>\r\n              {modeText}\r\n            </Button>\r\n          </div>\r\n          <div className='on-right'>\r\n            <div className='app-buttons'>\r\n              <Button\r\n                fluid\r\n                onClick={e => {\r\n                  e.preventDefault()\r\n                  e.stopPropagation()\r\n                  reset()\r\n                }}>\r\n                  Reset\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='progress-div'>\r\n          {prog}\r\n        </div>\r\n    </div>\r\n  </div>\r\n\r\n  // render the view\r\n  return view\r\n}\r\n\r\nexport default View;\r\n","// Deploy on gitpage info here\r\n// https://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f\r\nimport React, {useState, useEffect, useRef } from 'react'\r\nimport View from './view'\r\nimport sightwords from './words'\r\n\r\nconst TIMED_MODE = 'rapid_fire'\r\nconst NORMAL_MODE = 'normal_mode'\r\n// the time in seconds used by the rapid fire mode\r\nconst TIME = 10\r\nlet time = 0\r\n// the list of words to test the student on\r\nconst words = setup(sightwords)\r\n\r\n// used to stop the rapid fire mode\r\nlet stopRapidFire = null\r\n\r\n/**\r\n * used to randomize the list of sight words to prevent the studdent from expecting a given order\r\n * @param {array} sightwords - list of sight words to test the student with\r\n */\r\nfunction setup (sightwords) {\r\n  const w = [...sightwords] // copy the sightwords array so we can distory it as we go\r\n  const ret = [] // the new randomized array\r\n\r\n  // Build the new array\r\n  while (w.length > 0) {\r\n    // randomly select a word from the old array\r\n    let i = Math.floor(Math.random() * w.length)\r\n    // put the word in the new array\r\n    ret.push(w[i])\r\n    // remove the word form the old array\r\n    w.splice(i, 1)\r\n  }\r\n\r\n  // return the new randomize array\r\n  return ret\r\n}\r\n\r\n/**\r\n * get the index for the next display word \r\n * @param {number} index - the index of the currently displayed word\r\n */\r\nfunction next (index) {\r\n  let nIndex = index + 1\r\n  // if we are going over the out of bounds of the array go back to 0\r\n  if (nIndex >= words.length) {\r\n    nIndex = 0\r\n  }\r\n  return nIndex\r\n}\r\n\r\n/**\r\n * get the index of the previously displayed word\r\n * @param {number} index - the index of the currently displayed word\r\n */\r\nfunction prev (index) {\r\n  let nIndex = index - 1\r\n  if (nIndex <= 0) {\r\n    nIndex = words.length -1\r\n  }\r\n  return nIndex\r\n}\r\n\r\nfunction timer (update) {\r\n  const id = setInterval(_ => {\r\n    update()\r\n  }, 1000)\r\n  return _ => clearInterval(id)\r\n}\r\n\r\n/**\r\n * run the application\r\n */\r\nfunction Main() {\r\n  const [hits, setHits] = useState(0)\r\n  const [miss, setMiss] = useState(0)\r\n  const [index, setIndex] = useState(0)\r\n  const [mode, setMode] = useState(NORMAL_MODE)\r\n  const [status, setStatus] = useState('')\r\n  const word = words[index]\r\n  return <View\r\n    current={index + 1}\r\n    total={words.length}\r\n    word={word}\r\n    status={status}\r\n    hits={hits}\r\n    misses={miss}\r\n    showTimer={mode === TIMED_MODE}\r\n    time={time/TIME * 100}\r\n    changeMode={_ => {\r\n      let end\r\n      if (mode === NORMAL_MODE) {\r\n        setMode(TIMED_MODE)\r\n        stopRapidFire = timer(_ => {\r\n          console.log('here')\r\n          let nt = time + 1\r\n          if (nt > TIME) {\r\n            time = 0\r\n            setMiss(miss + 1)\r\n            setIndex(next(index))\r\n          } else {\r\n            time = nt\r\n            setStatus(nt)\r\n          }\r\n        })\r\n      } else {\r\n        setMode(NORMAL_MODE)\r\n        stopRapidFire()\r\n        stopRapidFire = null\r\n        time = 0\r\n        setStatus('')\r\n      }\r\n    }}\r\n    next={_ => {\r\n      setIndex(next(index))\r\n      setStatus('Next')\r\n    }}\r\n    prev={_ => {\r\n      setIndex(prev(index))\r\n      setStatus(\"Prev\")\r\n    }}\r\n    hit={ _ => {\r\n      setHits(hits + 1)\r\n      setIndex(next(index))\r\n      setStatus('Score')\r\n    }}\r\n    miss={ _ => {\r\n      setMiss(miss + 1)\r\n      setIndex(next(index))\r\n      setStatus('Miss')\r\n    }}\r\n    reset={ _ => {\r\n      setHits(0)\r\n      setMiss(0)\r\n      setIndex(0)\r\n    }} />\r\n}\r\n\r\nexport default Main;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './main';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}