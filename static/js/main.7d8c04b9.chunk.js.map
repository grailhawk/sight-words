{"version":3,"sources":["view.js","help.js","main.js","reportWebVitals.js","index.js"],"names":["View","prop","prog","current","total","word","status","next","prev","hits","hit","misses","miss","defer","reset","showTimer","changeMode","showHelp","time","handlers","useSwipeable","onSwipedDown","_","onSwipedUp","onSwipedLeft","onSwipedRight","preventDefaultTouchmoveEvent","Segment","inverted","Progress","percent","className","onClick","onContextMenu","e","preventDefault","Button","circular","icon","stopPropagation","Help","Modal","basic","onClose","setOpen","onOpen","open","size","Header","Icon","name","Content","Actions","color","TIMED_MODE","NORMAL_MODE","words","sightwords","w","ret","length","i","Math","floor","random","push","splice","setup","idk","idkMap","index","nIndex","stop","Main","useState","setHits","setMiss","setIndex","mode","setMode","setStatus","help","setHelp","rapid","action","update","id","setInterval","clearInterval","timer","nt","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d8c04b9.chunk.js","sourcesContent":["import React from 'react'\nimport { useSwipeable } from 'react-swipeable'\nimport { Button, Progress, Segment } from 'semantic-ui-react'\nimport './styles.css';\n\nfunction View(prop) {\n  const {\n    current,   // index of the word being displayed\n    total,     // total number of words known\n    word,      // the current sight word being shown\n    status,    // score|miss|next|prev basicly the last action taken\n    next,      // func used to show the next word\n    prev,      // func used to show the previous word\n    hits,      // number of words the player/student has gotten right\n    hit,       // func used to indicate that the player/student has gotten a word correctly\n    misses,    // number of words the player/student has gotten wrong\n    miss,      // func used to indicate that the player/student has gotten a word wrong\n    defer,     // func used when the player/student says \"I don't know\"\n    reset,     // func used to reset the Hits, Misses, and to go back to the first word.\n    showTimer, // show the timer\n    changeMode,// Used to change the game mode form timed to normal\n    showHelp,  // func used to show help text\n    time       // if game mode === timed then this is the time left before the end of the round\n  } = prop\n\n  // Build the swipeable handlers\n  const handlers = useSwipeable({\n    onSwipedDown: _ => miss(),\n    onSwipedUp: _ => hit(),\n    onSwipedLeft: _ => next(),\n    onSwipedRight: _ => prev(),\n    preventDefaultTouchmoveEvent: true\n  })\n\n  let prog\n  if (showTimer) {\n    prog = <Segment inverted>\n      <Progress percent={time} inverted/>\n    </Segment>\n  }\n\n  let modeText = 'Start'\n  if (showTimer) {\n    modeText = 'End'\n  }\n  // Build t he view\n  const view = <div\n    { ...handlers }\n    className=\"app-header\"\n    onClick={defer}\n    onContextMenu={ e => {\n      e.preventDefault()\n      prev()\n    }}>\n    <div className='app-report'>\n      <div className='app-report-left'>\n        <Button\n          className='app-button'\n          circular\n          icon='play'\n          onClick={(e) => {\n            e.preventDefault()\n            e.stopPropagation()\n            reset()\n          }} />\n      </div>\n      <div className='app-report-center'>\n      </div>\n      <div className='app-report-right'>\n        <Button\n          className='app-button'\n          circular\n          icon='hourglass outline'\n          onClick={(e) => {\n            e.preventDefault()\n            e.stopPropagation()\n            changeMode()\n          }} />\n        <Button\n          className='app-button'\n          circular\n          icon='help'\n          onClick={(e) => {\n            e.preventDefault()\n            e.stopPropagation()\n            showHelp()\n          }} />\n      </div>\n    </div>\n    <div className='word'>\n      {word}\n    </div>\n    {/* <p>\n      {word}\n    </p> */}\n    <div className='app-report'>\n      <div className='app-report-left'>\n        {hits}\n      </div>\n      <div className='app-report-center'>\n        {current}/{total}\n      </div>\n      <div className='app-report-right'>\n        {misses}\n      </div>\n    </div>\n    <div>\n      {status}\n    </div>\n    <div className='progress-div'>\n      {prog}\n    </div>\n    {/* <div className='bottom'>\n        <div>\n          <div className='app-buttons'>\n            <Button\n              fluid\n              onClick={e => {\n                e.preventDefault()\n                e.stopPropagation()\n                changeMode()\n              }}>\n              {modeText}\n            </Button>\n          </div>\n          <div className='on-right'>\n            <div className='app-buttons'>\n              <Button\n                fluid\n                onClick={e => {\n                  e.preventDefault()\n                  e.stopPropagation()\n                  reset()\n                }}>\n                  Reset\n              </Button>\n            </div>\n          </div>\n        </div>\n        <div className='progress-div'>\n          {prog}\n        </div>\n    </div> */}\n  </div>\n\n  // render the view\n  return view\n}\n\nexport default View;\n","import React from 'react'\r\nimport { Button, Header, Icon, Modal  } from 'semantic-ui-react'\r\nimport './styles.css';\r\n\r\nfunction Help(prop) {\r\n    return <Modal\r\n        basic\r\n        onClose={() => prop.setOpen(false)}\r\n        onOpen={() => prop.setOpen(true)}\r\n        open={prop.open}\r\n        size='small'\r\n    >\r\n        <Header icon>\r\n            <Icon name='archive' />\r\n            Archive Old Messages\r\n        </Header>\r\n        <Modal.Content>\r\n            <p>\r\n                <br/>Swipe up when answer corect.\r\n                <br/>Swipe down when answer is wrong.\r\n                <br/>Tap work when answer is unknown.\r\n            </p>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n            <Button color='green' inverted onClick={() => prop.setOpen(false)}>\r\n                <Icon name='checkmark' /> OK\r\n            </Button>\r\n        </Modal.Actions>\r\n    </Modal>\r\n}\r\n\r\nexport default Help;","// Deploy on gitpage info here\n// https://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f\nimport React, { useState } from 'react'\nimport View from './view'\nimport Help from './help'\nimport sightwords from './words'\n\nconst TIMED_MODE = 'rapid_fire'\nconst NORMAL_MODE = 'normal_mode'\n// the time in seconds used by the rapid fire mode\nconst TIME = 10\nlet time = 0\n// the list of words to test the student on\nconst words = setup(sightwords)\n\n// list of words the students said \"I don't know to\"\nlet idk = []\nlet idkMap = {}\n\n/**\n * used to randomize the list of sight words to prevent the studdent from expecting a given order\n * @param {array} sightwords - list of sight words to test the student with\n */\nfunction setup (sightwords) {\n  const w = [...sightwords] // copy the sightwords array so we can distory it as we go\n  const ret = [] // the new randomized array\n\n  // Build the new array\n  while (w.length > 0) {\n    // randomly select a word from the old array\n    let i = Math.floor(Math.random() * w.length)\n    // put the word in the new array\n    ret.push(w[i])\n    // remove the word form the old array\n    w.splice(i, 1)\n  }\n\n  // return the new randomize array\n  return ret\n}\n\n/**\n * get the index for the next display word \n * @param {number} index - the index of the currently displayed word\n */\nfunction next (index) {\n  let nIndex = index + 1\n  // if we are going over the out of bounds of the array go back to 0\n  if (nIndex >= words.length) {\n    nIndex = 0\n  }\n  return nIndex\n}\n\n/**\n * get the index of the previously displayed word\n * @param {number} index - the index of the currently displayed word\n */\nfunction prev (index) {\n  let nIndex = index - 1\n  if (nIndex <= 0) {\n    nIndex = words.length -1\n  }\n  return nIndex\n}\n\nfunction defer (index) {\n  let word = words[index]\n  if (idkMap[word] == null) {\n    idkMap[word] = idk.length -1\n    idk.push(word)\n  }\n\n  return next(index)\n}\n\n// used to stop the rapid fire mode\nlet stop = null\n\n/**\n * run the application\n */\nfunction Main() {\n  const [hits, setHits] = useState(0)\n  const [miss, setMiss] = useState(0)\n  const [index, setIndex] = useState(0)\n  const [mode, setMode] = useState(NORMAL_MODE)\n  const [status, setStatus] = useState('')\n  const [help, setHelp] = useState(false)\n  const word = words[index]\n\n  console.log(stop)\n  function rapid (action) {\n    /**\n     * used to abstract setInterval functionality\n     * @param {func} update - interval callback\n     */\n    function timer (update) {\n      const id = setInterval(_ => {\n        update()\n      }, 1000)\n      return _ => clearInterval(id)\n    }\n\n    if (action === 'reset') {\n      rapid('stop')\n      rapid('start')\n    }\n  \n    if (action === 'stop') {\n      if (stop != null) {\n        stop()\n        stop = null\n        time = 0\n        setStatus('')\n      }\n    }\n\n    if (action == null || action === '' || action === 'start') {\n      stop = timer(_ => {\n        let nt = time + 1\n        if (nt > TIME) {\n          time = 0\n          setStatus(0)\n          // setMiss(miss + 1)\n          // setIndex(next(index))\n        } else {\n          time = nt\n          setStatus(nt)\n        }\n      })\n      console.log(stop)\n    }\n  }\n\n\n  return <div>\n    <Help open={help} setOpen={setHelp} />\n    <View\n      current={index + 1}\n      total={words.length}\n      word={word}\n      status={status}\n      hits={hits}\n      misses={miss}\n      showTimer={mode === TIMED_MODE}\n      time={time/TIME * 100}\n      changeMode={_ => {\n        if (mode === NORMAL_MODE) {\n          setMode(TIMED_MODE)\n          rapid('start')\n        } else {\n          setMode(NORMAL_MODE)\n          rapid('stop')\n        }\n      }}\n      next={_ => {\n        setIndex(next(index))\n        setStatus('Next')\n      }}\n      prev={_ => {\n        setIndex(prev(index))\n        setStatus(\"Prev\")\n      }}\n      hit={ _ => {\n        if (mode === TIMED_MODE) {\n          rapid('reset')\n        }\n        setHits(hits + 1)\n        setIndex(next(index))\n        setStatus('Score')\n      }}\n      miss={ _ => {\n        if (mode === TIMED_MODE) {\n          rapid('reset')\n        }\n        setMiss(miss + 1)\n        setIndex(next(index))\n        setStatus('Miss')\n      }}\n      defer={ _ => {\n        if (mode === TIMED_MODE) {\n          rapid('reset')\n        }\n        setMiss(miss + 1)\n        setIndex(defer(index))\n        setStatus('Miss')\n      }}\n      showHelp={ _ => setHelp(true)}\n      reset={ _ => {\n        setHits(0)\n        setMiss(0)\n        setIndex(0)\n      }} />\n  </div>\n}\n\nexport default Main;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './main';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}